@model HinttechPractice.Data.Vacation

<script>
    var flag="@(ViewBag.Flag)";
    function funProvera() {
        var proveraDani=@(ViewBag.BrDana);
        var datumProvera="@(ViewBag.Datum)";
        var datum1 = "@(ViewBag.editDateFrom)";
        var datum2 = document.getElementById("datum2").value;
        var sick=document.getElementById("sick").value;
        var oneDay = 24 * 60 * 60 * 1000;
        var dodatak= 20 - proveraDani;
        var diffDays = Math.round((new Date(datum2) - new Date("@ViewBag.editDateTo")) / (oneDay));
        var days =0;
        days= workingDaysBetweenDates(new Date("@ViewBag.editDateTo"),new Date(datum2))-1;


        if (days > proveraDani && sick=="False") {
            
            alertify
                    .alert("You choose more then " + proveraDani +" WORK days", function () {
                        alertify.error('Please try again');
                    });
            return false;

        }
        if (datum2 < datum1) {
            alertify.error("Incorrect.Please try again with new date");
            return false;
        }else if (datum2 <= datumProvera) { 
            alertify.error("Incorrect.Please try with new date after " + datumProvera);
            return false;
        }else{
            alertify.success("Well done you can proceed now");
            return true;
        }
    }

    function myFunction(){
        if(flag==1){
            alertify
                        .alert("You cant use this date for vacation because you already have vacation in that period", function () {
                            alertify.error('Please try again with new period');
                        });
            alertify.error("Greska");
        }    
       

    }



    function workingDaysBetweenDates(startDate, endDate) {
  
        
        if (endDate < startDate)
            return 0;
    
        
        var millisecondsPerDay = 86400 * 1000; 
        startDate.setHours(0,0,0,1);  
        endDate.setHours(23,59,59,999);
        var diff = endDate - startDate;   
        var days = Math.ceil(diff / millisecondsPerDay);
      
        var weeks = Math.floor(days / 7);
        days = days - (weeks * 2);
    
        var startDay = startDate.getDay();
        var endDay = endDate.getDay();
        
        if (startDay - endDay > 1)         
            days = days - 2;      
        
        if (startDay == 0 && endDay != 6)
            days = days - 1  
            
        if (endDay == 6 && startDay != 0)
            days = days - 1  
    
        return days;
    }

</script>

<body onload="myFunction()">

    @using (Html.BeginForm("EditVacation", "LoadVacations", FormMethod.Post, new { onsubmit = "return funProvera()" }))
    {
        @Html.AntiForgeryToken()
        <br /><br />
        <div class="row" align="center">
            <div class="col-md-4 col-md-offset-4 bg-success">
                @Html.ValidationSummary(true)

                <div class="form-group">

                    <div class="col-md-10">
                        @Html.HiddenFor(model => model.VacationPeriodId)
                        @Html.ValidationMessageFor(model => model.VacationPeriodId)
                    </div>
                </div>

                <div class="form-group">

                    <div class="col-md-10">
                        @Html.HiddenFor(model => model.UserId)
                        @Html.ValidationMessageFor(model => model.UserId)
                    </div>
                </div>

                <div class="form-group">
                    @if ((DateTime.Parse(@ViewBag.Datum)) > (DateTime.Parse(@ViewBag.editDateFrom)))
                    {
                        <div class="col-md-10">
                            <input type="date" id="datum3" name="DateFrom" required class="form-control" value="@ViewBag.editDateFrom" readonly />
                        </div>
                    }
                    else
                    {
                        <div class="col-md-10">
                            <input type="date" id="datum1" name="DateFrom" required class="form-control" value="@ViewBag.editDateFrom" />
                        </div>
                    }
                </div>

                <div class="form-group">

                    <div class="col-md-10">
                        <input type="date" id="datum2" name="DateTo" required class="form-control" value="@ViewBag.editDateTo" />
                    </div>
                </div>

                <div class="form-group">

                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control text-info" } })
                        @Html.ValidationMessageFor(model => model.Description)
                    </div>
                </div>

                <div class="form-group">

                    <div class="col-md-10">
                        @Html.HiddenFor(model => model.IsSickLeave, new { @id = "sick" })
                        @Html.ValidationMessageFor(model => model.IsSickLeave)
                    </div>
                </div>
                <input type="hidden" value="@Request.QueryString["page"]" name="page" />
                <input type="hidden" value="@Request.QueryString["calendar"]" name="calendar" />
                <div class="form-group">
                    <div class="col-md col-md-10">
                        <input type="submit" value="Save" class="btn btn-success btn-block" />

                    </div>
                </div>
            </div>
        </div>
    }
    <br />
</body>


<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
